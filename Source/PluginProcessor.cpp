/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

    Ok now it started!

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include <math.h>


//==============================================================================
DistortionAudioProcessor::DistortionAudioProcessor()
{
    
    //Default values
    gainControl_ = 3;
    lastUIWidth_ = 370;
    lastUIHeight_ = 140;
    distoTypes_ = hardClipping_;
}

DistortionAudioProcessor::~DistortionAudioProcessor()
{
}

//==============================================================================
const String DistortionAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int DistortionAudioProcessor::getNumParameters()
{
    return kNumParameters;
}

float DistortionAudioProcessor::getParameter (int index)
{
    switch (index){
            
        case kGainControl : return gainControl_;
        case kTypes : return distoTypes_;
        default : return gainControl_;
    }
}

void DistortionAudioProcessor::setParameter (int index, float newValue)
{
    switch (index){
            
        case kGainControl : gainControl_=newValue;
            break;
        default : gainControl_=newValue;
            break;
    }
}

const String DistortionAudioProcessor::getParameterName (int index)
{
    switch(index){
            
        case kGainControl : return "Gain";
        case kTypes : return "Types of Distortion";
        default : return "Gain";
            
    }
    
    return String::empty;
}

const String DistortionAudioProcessor::getParameterText (int index)
{
    return String();
}

const String DistortionAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String DistortionAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool DistortionAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool DistortionAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool DistortionAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool DistortionAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool DistortionAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double DistortionAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int DistortionAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int DistortionAudioProcessor::getCurrentProgram()
{
    return 0;
}

void DistortionAudioProcessor::setCurrentProgram (int index)
{
}

const String DistortionAudioProcessor::getProgramName (int index)
{
    return String();
}

void DistortionAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void DistortionAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
}

void DistortionAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void DistortionAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    
    //num samples in buffer for this block
    const int numSamples = buffer.getNumSamples();
    
    //local gain state variable;
    float gain;
    
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());

    // This is the place where you'd normally do the guts of your plugin's
    // audio processing...
    for (int channel = 0; channel < getNumInputChannels(); ++channel)
    {
        float* channelData = buffer.getWritePointer (channel);
        gain = gainControl_;

        for (int i = 0; i < numSamples; ++i)
        {
            
        const float in = channelData[i];
        float out = 0.0;
        
     
    //Distortion function
            switch(distoTypes_){
                    
                case 0 : 
                    
                    //Soft clipping 1
                    if(in<(1/3)) out = 2*in;
                    else if (in	>= (1/3) && in < (2/3)) out = (1-powf(2-3*in,2))/3;
                    else out = 1;
                    break;
                
            
                case 1 : 
                    //Soft clipping 2
                    if(in<0) out = -1.0f+expf(gain*in);
                    else out = 1.0f-expf(-(gain*in));
                    break;
                
   
                case 2 : 
                    //Full wave rectifier
                    out = gain*fabs(in);
                    break;
                    
                case 3 :
            
                    //Half wave rectifier
                    out = fmaxf(in,0);
                    break;
                    
                case 4 :

                    //Hard clipping
                    if(in<=-(1/gain)) out = -1;
                    else if (in	> -(1/gain) && in <= (1/gain)) out = gain*in;
                    else out = 1;
                    break;
            
            }
       
        // Store the output in the buffer, replacing input
        channelData[i] = out;
        }
    }
    
    gainControl_ = gain ;
}

//==============================================================================
bool DistortionAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* DistortionAudioProcessor::createEditor()
{
    return new DistortionAudioProcessorEditor (*this);
}

//==============================================================================
void DistortionAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void DistortionAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new DistortionAudioProcessor();
}
